import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  :};

/* Terminals (tokens returned by the scanner). */
// keywords
terminal FUN;

// special symbols
terminal LPAREN, RPAREN, SEMI;
terminal LBRACE, RBRACE, COMMA, EQU;
terminal COLON;
terminal IF, ELSE, END; 

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ASSIGN;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Cmp CMP;     
/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;

/* ** Fix these declarations ** */
non terminal StmtFunDefn funDefn;
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;
non terminal ExpFunCall funCall;
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;
non terminal Exp StmtIf; //TODO replace with IR
non terminal Exp StmtIfElse;
non terminal ExpLogic LogExp;

/* **** */

non terminal Exp expression;
non terminal Exp term;
non terminal Exp factor;
non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d {: RESULT = d; :} |
	 expression:e {: RESULT = new Statement(e); :} SEMI | funDefn:fd {:RESULT = fd;:};

/*If grammer*/
StmtIf ::= IF LogExp:le COLON expression:consqt END {:RESULT = new ExpIf(le,consqt);:};
StmtIfElse ::= IF LogExp:le COLON expression:consqt ELSE expression:alt END {:RESULT = new ExpIf(le,consqt,alt);:};
LogExp ::= expression:l CMP:c expression:r {:RESULT = new ExpLogic(l,r,c);:} | expression:l EQU expression:r {:RESULT = new ExpLogic(l,r,Cmp.EQ);:};

funDefn ::= FUN VAR:v LPAREN paramListE:params RPAREN EQU expression:e SEMI {:RESULT = new StmtFunDefn(v,params,e); :}|  
FUN VAR:v LPAREN paramListE:params RPAREN EQU LBRACE stmtList:s RBRACE {:RESULT = new StmtFunDefn(v,params,s); :};  /* complete this */

paramList ::= paramList:pl COMMA VAR:e {:pl.add(e); RESULT = pl;:} | VAR:e {:ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;:};  

paramListE ::= paramList:pl {:RESULT = pl;:} | empty:e {:ArrayList<String> var = new ArrayList<String>(); RESULT = var;:};

definition ::= VAR:v ASSIGN expression:e SEMI {:
		   RESULT = new StmtDefinition(v, e);
		:};

expression ::= 	expression:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :} | StmtIf:t {:RESULT = t;:} | StmtIfElse:e {:RESULT = e;:};

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
	 factor:f {: RESULT = f; :};

funCall ::= VAR:v LPAREN argListE:a RPAREN {:RESULT = new ExpFunCall(v,a);:};

argList ::= argList:al COMMA expression:e {:al.add(e); RESULT = al;:} | expression:e {:ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;:};  

argListE ::= argList:pl {:RESULT = pl;:} | empty:e {:RESULT = new ArrayList<Exp>(); :};


factor ::= INT:ilit {: RESULT = new ExpLit(ilit); :} |
	   VAR:var {: RESULT = new ExpVar(var); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :}	| funCall:fc {:RESULT = fc;:};

empty ::= ;
